//package dump;
//
//public class Main {
//    public static void main(String[] args) {
//        Person p = new Person("Vasya", 20, "M");
//        Person p1 = new Person("Borya", 20, "m");
//        Person p3 = new Person("Olya", 20, "F");
//        System.out.println(p.getName()+ p.name);
//        System.out.println(p3.getName()+ p3.name);
//
//
////        Необходимо создать класс Employee с полями как у Person (из предыдущего задания) и поле зарплата.
////        Класс должен иметь метод isSameName(Employee employee) который возвращает true, если у сотрудника у
////        которого был вызван метод и сотрудника который был передан как параметр, одинаковое имя.
//
//        Employee e=new Employee("Olga", 20, "F", 20);
//        Employee e2 = new Employee("Olga", 20, "F", 10);
//        Employee e3 = new Employee("Olga2", 20, "F", 5);
//        System.out.println( e.isSameName(e2));
//
////        Необходимо создать класс Salary с единственным методом - getSum(Employee[] employeeArray),
////        метод должен возвращать сумму зарплат всех сотрудников из массива переданного в качестве аргумента вызова метода.
//        Employee[] array= {e,e2,e3};
//        System.out.println(Salary.getSum(array));
//
//
//    }
//}


//Для объявления метода в Java необходимо указать его сигнатуру,
// которая содержит имя метода, список аргументов и тип возвращаемого
// значения (если метод должен что-то вернуть).
//
//Синтаксис объявления метода:
//
//[модификаторы] [тип возвращаемого значения] [имя метода]([список аргументов]) {
//    //тело метода
//}
//
//Например, объявление метода, который принимает два целочисленных
// аргумента и возвращает их сумму, может выглядеть так:
//
//public int sum(int a, int b) {
//    int result = a + b;
//    return result;
//}
//
//Здесь мы использовали модификатор доступа "public", чтобы метод был доступен из любой части программы.
//
//Тип возвращаемого значения указывается перед именем метода.
// В данном случае мы указали тип "int", так как метод должен вернуть целочисленное значение.
//
//В скобках после имени метода перечисляются аргументы,
// которые он принимает. Каждый аргумент состоит из типа и имени переменной.
//
//В теле метода мы выполняем необходимые действия и
// в конце возвращаем результат операции с помощью ключевого слова "return".
// Если метод ничего не должен возвращать, то тип возвращаемого значения указывается как "void".